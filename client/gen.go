// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package client

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

const (
	SidScopes       = "sid.Scopes"
	SynotokenScopes = "synotoken.Scopes"
)

// GetGuestResponse defines model for GetGuestResponse.
type GetGuestResponse struct {
	Data    *Guest `json:"data,omitempty"`
	Success *bool  `json:"success,omitempty"`
}

// Guest defines model for Guest.
type Guest struct {
	Autorun     *int32  `json:"autorun,omitempty"`
	Description *string `json:"description,omitempty"`
	GuestId     *string `json:"guest_id,omitempty"`
	GuestName   *string `json:"guest_name,omitempty"`
	Status      *string `json:"status,omitempty"`
	StorageId   *string `json:"storage_id,omitempty"`
	StorageName *string `json:"storage_name,omitempty"`
	VcpuNum     *int32  `json:"vcpu_num,omitempty"`
	Vdisks      *[]struct {
		Controller *int32  `json:"controller,omitempty"`
		Unmap      *bool   `json:"unmap,omitempty"`
		VdiskId    *string `json:"vdisk_id,omitempty"`
		VdiskSize  *int32  `json:"vdisk_size,omitempty"`
	} `json:"vdisks,omitempty"`
	Vnics *[]struct {
		Mac         *string `json:"mac,omitempty"`
		Model       *int32  `json:"model,omitempty"`
		NetworkId   *string `json:"network_id,omitempty"`
		NetworkName *string `json:"network_name,omitempty"`
		VnicId      *string `json:"vnic_id,omitempty"`
	} `json:"vnics,omitempty"`
	VramSize *int32 `json:"vram_size,omitempty"`
}

// ListGuestResponse defines model for ListGuestResponse.
type ListGuestResponse struct {
	Data *struct {
		Tasks *[]Guest `json:"tasks,omitempty"`
		Total *int32   `json:"total,omitempty"`
	} `json:"data,omitempty"`
	Success *bool `json:"success,omitempty"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse = map[string]any

// LoginParams defines parameters for Login.
type LoginParams struct {
	// Account Synology username.
	Account string `form:"account" json:"account"`

	// Passwd Synology password.
	Passwd string `form:"passwd" json:"passwd"`
}

// GetGuestParams defines parameters for GetGuest.
type GetGuestParams struct {
	// GuestName Name of the vm guest.
	GuestName string `form:"guest_name" json:"guest_name"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Login request
	Login(ctx context.Context, params *LoginParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGuest request
	GetGuest(ctx context.Context, params *GetGuestParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListGuests request
	ListGuests(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Login(ctx context.Context, params *LoginParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGuest(ctx context.Context, params *GetGuestParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGuestRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListGuests(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListGuestsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewLoginRequest generates requests for Login
func NewLoginRequest(server string, params *LoginParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/webapi/entry.cgi?api=SYNO.API.Auth&version=6&method=login&format=sid&enable_syno_token=yes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "account", runtime.ParamLocationQuery, params.Account); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "passwd", runtime.ParamLocationQuery, params.Passwd); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGuestRequest generates requests for GetGuest
func NewGetGuestRequest(server string, params *GetGuestParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/webapi/entry.cgi?api=SYNO.Virtualization.API.Guest&method=get&version=1")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "guest_name", runtime.ParamLocationQuery, params.GuestName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListGuestsRequest generates requests for ListGuests
func NewListGuestsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/webapi/entry.cgi?api=SYNO.Virtualization.Guest&method=list&version=7")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// LoginWithResponse request
	LoginWithResponse(ctx context.Context, params *LoginParams, reqEditors ...RequestEditorFn) (*LoginResponse, error)

	// GetGuestWithResponse request
	GetGuestWithResponse(ctx context.Context, params *GetGuestParams, reqEditors ...RequestEditorFn) (*GetGuestResponse, error)

	// ListGuestsWithResponse request
	ListGuestsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListGuestsResponse, error)
}

type LoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LoginResponse
}

// Status returns HTTPResponse.Status
func (r LoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGuestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetGuestResponse
}

// Status returns HTTPResponse.Status
func (r GetGuestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGuestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListGuestsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListGuestResponse
}

// Status returns HTTPResponse.Status
func (r ListGuestsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListGuestsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// LoginWithResponse request returning *LoginResponse
func (c *ClientWithResponses) LoginWithResponse(ctx context.Context, params *LoginParams, reqEditors ...RequestEditorFn) (*LoginResponse, error) {
	rsp, err := c.Login(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginResponse(rsp)
}

// GetGuestWithResponse request returning *GetGuestResponse
func (c *ClientWithResponses) GetGuestWithResponse(ctx context.Context, params *GetGuestParams, reqEditors ...RequestEditorFn) (*GetGuestResponse, error) {
	rsp, err := c.GetGuest(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGuestResponse(rsp)
}

// ListGuestsWithResponse request returning *ListGuestsResponse
func (c *ClientWithResponses) ListGuestsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListGuestsResponse, error) {
	rsp, err := c.ListGuests(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListGuestsResponse(rsp)
}

// ParseLoginResponse parses an HTTP response from a LoginWithResponse call
func ParseLoginResponse(rsp *http.Response) (*LoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LoginResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetGuestResponse parses an HTTP response from a GetGuestWithResponse call
func ParseGetGuestResponse(rsp *http.Response) (*GetGuestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGuestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetGuestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListGuestsResponse parses an HTTP response from a ListGuestsWithResponse call
func ParseListGuestsResponse(rsp *http.Response) (*ListGuestsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListGuestsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListGuestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
